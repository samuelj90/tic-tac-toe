{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","className","onClick","this","props","value","React","Component","Board","index","squares","renderSquare","Game","state","getInitialState","nextPlayer","Array","fill","winner","isDraw","getMessage","i","handleClick","restart","setState","currentPlayer","currentSquares","calculateWinner","checkGameDraw","findIndex","e","winnerLines","length","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6a5f9aa1.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\nclass Square extends React.Component {\n    render() { \n        return ( <button className=\"square\" onClick={this.props.onClick}>{this.props.value}</button> );\n    }\n}\n \nexport default Square;","import React from 'react';\nimport Square from '../Square/Square';\nimport './style.css';\nclass Board extends React.Component {\n    renderSquare(index) {\n        return <Square value={this.props.squares[index]} onClick={() => this.props.onClick(index)} />;\n    }\n    render() {\n        return (\n            <div className=\"board\">\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React from 'react';\nimport Board from './Board/Board'\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = this.getInitialState();\n    }\n\n    getInitialState() {\n        return {\n            nextPlayer: \"X\",\n            squares: Array(9).fill(null),\n            winner: null,\n            isDraw: false\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>{this.getMessage()}</h3>\n                <Board squares={this.state.squares} onClick={i => this.handleClick(i)}></Board>\n            </div>\n        );\n    }\n\n    getMessage() {\n        if (this.state.isDraw)\n            return <span>Gameover !! Game Drwan <button onClick={() => { this.restart() }}>Restart</button></span>\n        if (this.state.winner)\n            return <span>Gameover !! Winner {this.state.winner} <button onClick={() => { this.restart() }}>Restart</button></span>\n        return <span> Next Player {this.state.nextPlayer}</span>\n    }\n\n    restart() {\n        this.setState(\n            this.getInitialState()\n        )\n    }\n\n    handleClick(i) {\n        if (this.state.winner || this.state.isDraw || this.state.squares[i]) {\n            return;\n        }\n        const currentPlayer = this.state.nextPlayer;\n        const nextPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\n\n        const currentSquares = [...this.state.squares];\n        currentSquares[i] = currentPlayer;\n\n        let winner = this.calculateWinner(currentSquares);\n\n        const isDraw = this.checkGameDraw(currentSquares);\n\n        this.setState({\n            squares: currentSquares,\n            nextPlayer: nextPlayer,\n            winner: winner,\n            isDraw\n        });\n    }\n\n    checkGameDraw(squares) {\n        if (squares.findIndex(e => e === null) > -1) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    calculateWinner(squares) {\n        const winnerLines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6]\n        ];\n        for (let i = 0; i < winnerLines.length; i++) {\n            const [a, b, c] = winnerLines[i];\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                return squares[a];\n            }\n        }\n        return null;\n    }\n\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> Welcome to tic tac toe game</h1>\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}